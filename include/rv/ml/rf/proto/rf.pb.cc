// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rv {
namespace rf {

namespace {

const ::google::protobuf::Descriptor* ForestParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForestParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ForestParameter_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SplitFunctionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitFunctionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SplitFunctionParameter_SplitFunctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SplitFunctionParameter_GeneratorSpace_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SplitEvaluatorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitEvaluatorParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SplitEvaluatorParameter_SplitEvaluatorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LeafNodeFcnParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeafNodeFcnParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LeafNodeFcnParameter_LeafNodeFcnType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rf_2eproto() {
  protobuf_AddDesc_rf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rf.proto");
  GOOGLE_CHECK(file != NULL);
  ForestParameter_descriptor_ = file->message_type(0);
  static const int ForestParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, split_function_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, split_evaluator_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, leaf_node_fcn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, n_trees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, max_tree_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, n_test_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, n_test_split_functions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, n_test_thresholds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, min_samples_to_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, min_samples_for_leaf_),
  };
  ForestParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForestParameter_descriptor_,
      ForestParameter::default_instance_,
      ForestParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForestParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForestParameter));
  ForestParameter_NodeType_descriptor_ = ForestParameter_descriptor_->enum_type(0);
  SplitFunctionParameter_descriptor_ = file->message_type(1);
  static const int SplitFunctionParameter_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_n_slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_fix_one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_x_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_x_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_x_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_y_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_y_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, gen_y_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, basis_csv_),
  };
  SplitFunctionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitFunctionParameter_descriptor_,
      SplitFunctionParameter::default_instance_,
      SplitFunctionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFunctionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitFunctionParameter));
  SplitFunctionParameter_SplitFunctionType_descriptor_ = SplitFunctionParameter_descriptor_->enum_type(0);
  SplitFunctionParameter_GeneratorSpace_descriptor_ = SplitFunctionParameter_descriptor_->enum_type(1);
  SplitEvaluatorParameter_descriptor_ = file->message_type(2);
  static const int SplitEvaluatorParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitEvaluatorParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitEvaluatorParameter, normalize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitEvaluatorParameter, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitEvaluatorParameter, weighted_mean_),
  };
  SplitEvaluatorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitEvaluatorParameter_descriptor_,
      SplitEvaluatorParameter::default_instance_,
      SplitEvaluatorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitEvaluatorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitEvaluatorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitEvaluatorParameter));
  SplitEvaluatorParameter_SplitEvaluatorType_descriptor_ = SplitEvaluatorParameter_descriptor_->enum_type(0);
  LeafNodeFcnParameter_descriptor_ = file->message_type(3);
  static const int LeafNodeFcnParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, lambda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, use_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, poly_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, weighted_regression_),
  };
  LeafNodeFcnParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeafNodeFcnParameter_descriptor_,
      LeafNodeFcnParameter::default_instance_,
      LeafNodeFcnParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNodeFcnParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeafNodeFcnParameter));
  LeafNodeFcnParameter_LeafNodeFcnType_descriptor_ = LeafNodeFcnParameter_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForestParameter_descriptor_, &ForestParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitFunctionParameter_descriptor_, &SplitFunctionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitEvaluatorParameter_descriptor_, &SplitEvaluatorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeafNodeFcnParameter_descriptor_, &LeafNodeFcnParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rf_2eproto() {
  delete ForestParameter::default_instance_;
  delete ForestParameter_reflection_;
  delete SplitFunctionParameter::default_instance_;
  delete SplitFunctionParameter_reflection_;
  delete SplitEvaluatorParameter::default_instance_;
  delete SplitEvaluatorParameter_reflection_;
  delete LeafNodeFcnParameter::default_instance_;
  delete LeafNodeFcnParameter_reflection_;
}

void protobuf_AddDesc_rf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010rf.proto\022\005rv.rf\"\305\003\n\017ForestParameter\022;\n"
    "\024split_function_param\030\001 \001(\0132\035.rv.rf.Spli"
    "tFunctionParameter\022=\n\025split_evaluator_pa"
    "ram\030\002 \003(\0132\036.rv.rf.SplitEvaluatorParamete"
    "r\0228\n\023leaf_node_fcn_param\030\003 \003(\0132\033.rv.rf.L"
    "eafNodeFcnParameter\022\022\n\007n_trees\030\005 \001(\r:\0014\022"
    "\031\n\016max_tree_depth\030\006 \001(\r:\0015\022\034\n\016n_test_sam"
    "ples\030\007 \001(\r:\0041000\022#\n\026n_test_split_functio"
    "ns\030\010 \001(\r:\003100\022\035\n\021n_test_thresholds\030\t \001(\r"
    ":\00210\022\037\n\024min_samples_to_split\030\n \001(\r:\0015\022\037\n"
    "\024min_samples_for_leaf\030\013 \001(\r:\0011\")\n\010NodeTy"
    "pe\022\016\n\nSPLIT_NODE\020\000\022\r\n\tLEAF_NODE\020\001\"\220\004\n\026Sp"
    "litFunctionParameter\022J\n\004type\030\001 \001(\0162/.rv."
    "rf.SplitFunctionParameter.SplitFunctionT"
    "ype:\013PIXEL_VALUE\022\027\n\014gen_n_slices\030\002 \001(\r:\001"
    "1\022\032\n\013gen_fix_one\030\003 \001(\010:\005false\022L\n\tgen_spa"
    "ce\030\004 \001(\0162,.rv.rf.SplitFunctionParameter."
    "GeneratorSpace:\013DATA_LINEAR\022\022\n\ngen_x_fro"
    "m\030\005 \001(\002\022\020\n\010gen_x_to\030\006 \001(\002\022\017\n\007gen_x_n\030\007 \001"
    "(\r\022\022\n\ngen_y_from\030\010 \001(\002\022\020\n\010gen_y_to\030\t \001(\002"
    "\022\017\n\007gen_y_n\030\n \001(\r\022\023\n\tbasis_csv\030\013 \001(\t:\000\"i"
    "\n\021SplitFunctionType\022\017\n\013PIXEL_VALUE\020\000\022\024\n\020"
    "PIXEL_DIFFERENCE\020\001\022\036\n\032PIXEL_DIFFERENCE_D"
    "EPENDENT\020\002\022\r\n\tBASIS_FCN\020\003\"9\n\016GeneratorSp"
    "ace\022\n\n\006LINEAR\020\000\022\n\n\006LOG_10\020\001\022\017\n\013DATA_LINE"
    "AR\020\002\"\372\002\n\027SplitEvaluatorParameter\022`\n\004type"
    "\030\001 \001(\01621.rv.rf.SplitEvaluatorParameter.S"
    "plitEvaluatorType:\037CLASSIFICATION_INFORM"
    "ATION_GAIN\022\027\n\tnormalize\030\002 \001(\010:\004true\022\021\n\006w"
    "eight\030\003 \001(\002:\0011\022\034\n\rweighted_mean\030\004 \001(\010:\005f"
    "alse\"\262\001\n\022SplitEvaluatorType\022#\n\037CLASSIFIC"
    "ATION_INFORMATION_GAIN\020\000\022\027\n\023CLASSIFICATI"
    "ON_GINI\020\001\022\030\n\024REGRESSION_TRACE_COV\020\002\022!\n\035R"
    "EGRESSION_VARIANCE_REDUCTION\020\003\022!\n\035REGRES"
    "SION_WEIGHTED_TRACE_COV\020\004\"\320\002\n\024LeafNodeFc"
    "nParameter\022I\n\004type\030\001 \001(\0162+.rv.rf.LeafNod"
    "eFcnParameter.LeafNodeFcnType:\016CLASSIFIC"
    "ATION\022\021\n\006lambda\030\002 \001(\002:\0010\022\026\n\010use_bias\030\003 \001"
    "(\010:\004true\022\026\n\013poly_degree\030\004 \001(\r:\0011\022\"\n\023weig"
    "hted_regression\030\005 \001(\010:\005false\"\205\001\n\017LeafNod"
    "eFcnType\022\022\n\016CLASSIFICATION\020\000\022\023\n\017REGRESSI"
    "ON_MEAN\020\001\022\027\n\023REGRESSION_MEAN_STD\020\002\022\025\n\021RE"
    "GRESSION_MEDIAN\020\003\022\031\n\025REGRESSION_REGRESSI"
    "ON\020\004", 1724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rf.proto", &protobuf_RegisterTypes);
  ForestParameter::default_instance_ = new ForestParameter();
  SplitFunctionParameter::default_instance_ = new SplitFunctionParameter();
  SplitEvaluatorParameter::default_instance_ = new SplitEvaluatorParameter();
  LeafNodeFcnParameter::default_instance_ = new LeafNodeFcnParameter();
  ForestParameter::default_instance_->InitAsDefaultInstance();
  SplitFunctionParameter::default_instance_->InitAsDefaultInstance();
  SplitEvaluatorParameter::default_instance_->InitAsDefaultInstance();
  LeafNodeFcnParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rf_2eproto {
  StaticDescriptorInitializer_rf_2eproto() {
    protobuf_AddDesc_rf_2eproto();
  }
} static_descriptor_initializer_rf_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ForestParameter_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForestParameter_NodeType_descriptor_;
}
bool ForestParameter_NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ForestParameter_NodeType ForestParameter::SPLIT_NODE;
const ForestParameter_NodeType ForestParameter::LEAF_NODE;
const ForestParameter_NodeType ForestParameter::NodeType_MIN;
const ForestParameter_NodeType ForestParameter::NodeType_MAX;
const int ForestParameter::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ForestParameter::kSplitFunctionParamFieldNumber;
const int ForestParameter::kSplitEvaluatorParamFieldNumber;
const int ForestParameter::kLeafNodeFcnParamFieldNumber;
const int ForestParameter::kNTreesFieldNumber;
const int ForestParameter::kMaxTreeDepthFieldNumber;
const int ForestParameter::kNTestSamplesFieldNumber;
const int ForestParameter::kNTestSplitFunctionsFieldNumber;
const int ForestParameter::kNTestThresholdsFieldNumber;
const int ForestParameter::kMinSamplesToSplitFieldNumber;
const int ForestParameter::kMinSamplesForLeafFieldNumber;
#endif  // !_MSC_VER

ForestParameter::ForestParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rv.rf.ForestParameter)
}

void ForestParameter::InitAsDefaultInstance() {
  split_function_param_ = const_cast< ::rv::rf::SplitFunctionParameter*>(&::rv::rf::SplitFunctionParameter::default_instance());
}

ForestParameter::ForestParameter(const ForestParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rv.rf.ForestParameter)
}

void ForestParameter::SharedCtor() {
  _cached_size_ = 0;
  split_function_param_ = NULL;
  n_trees_ = 4u;
  max_tree_depth_ = 5u;
  n_test_samples_ = 1000u;
  n_test_split_functions_ = 100u;
  n_test_thresholds_ = 10u;
  min_samples_to_split_ = 5u;
  min_samples_for_leaf_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForestParameter::~ForestParameter() {
  // @@protoc_insertion_point(destructor:rv.rf.ForestParameter)
  SharedDtor();
}

void ForestParameter::SharedDtor() {
  if (this != default_instance_) {
    delete split_function_param_;
  }
}

void ForestParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForestParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForestParameter_descriptor_;
}

const ForestParameter& ForestParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_2eproto();
  return *default_instance_;
}

ForestParameter* ForestParameter::default_instance_ = NULL;

ForestParameter* ForestParameter::New() const {
  return new ForestParameter;
}

void ForestParameter::Clear() {
  if (_has_bits_[0 / 32] & 249) {
    if (has_split_function_param()) {
      if (split_function_param_ != NULL) split_function_param_->::rv::rf::SplitFunctionParameter::Clear();
    }
    n_trees_ = 4u;
    max_tree_depth_ = 5u;
    n_test_samples_ = 1000u;
    n_test_split_functions_ = 100u;
    n_test_thresholds_ = 10u;
  }
  if (_has_bits_[8 / 32] & 768) {
    min_samples_to_split_ = 5u;
    min_samples_for_leaf_ = 1u;
  }
  split_evaluator_param_.Clear();
  leaf_node_fcn_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForestParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rv.rf.ForestParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rv.rf.SplitFunctionParameter split_function_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_function_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_split_evaluator_param;
        break;
      }

      // repeated .rv.rf.SplitEvaluatorParameter split_evaluator_param = 2;
      case 2: {
        if (tag == 18) {
         parse_split_evaluator_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_split_evaluator_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_split_evaluator_param;
        if (input->ExpectTag(26)) goto parse_leaf_node_fcn_param;
        break;
      }

      // repeated .rv.rf.LeafNodeFcnParameter leaf_node_fcn_param = 3;
      case 3: {
        if (tag == 26) {
         parse_leaf_node_fcn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaf_node_fcn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leaf_node_fcn_param;
        if (input->ExpectTag(40)) goto parse_n_trees;
        break;
      }

      // optional uint32 n_trees = 5 [default = 4];
      case 5: {
        if (tag == 40) {
         parse_n_trees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_trees_)));
          set_has_n_trees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_tree_depth;
        break;
      }

      // optional uint32 max_tree_depth = 6 [default = 5];
      case 6: {
        if (tag == 48) {
         parse_max_tree_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tree_depth_)));
          set_has_max_tree_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_n_test_samples;
        break;
      }

      // optional uint32 n_test_samples = 7 [default = 1000];
      case 7: {
        if (tag == 56) {
         parse_n_test_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_test_samples_)));
          set_has_n_test_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_n_test_split_functions;
        break;
      }

      // optional uint32 n_test_split_functions = 8 [default = 100];
      case 8: {
        if (tag == 64) {
         parse_n_test_split_functions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_test_split_functions_)));
          set_has_n_test_split_functions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_n_test_thresholds;
        break;
      }

      // optional uint32 n_test_thresholds = 9 [default = 10];
      case 9: {
        if (tag == 72) {
         parse_n_test_thresholds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_test_thresholds_)));
          set_has_n_test_thresholds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_min_samples_to_split;
        break;
      }

      // optional uint32 min_samples_to_split = 10 [default = 5];
      case 10: {
        if (tag == 80) {
         parse_min_samples_to_split:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_samples_to_split_)));
          set_has_min_samples_to_split();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_min_samples_for_leaf;
        break;
      }

      // optional uint32 min_samples_for_leaf = 11 [default = 1];
      case 11: {
        if (tag == 88) {
         parse_min_samples_for_leaf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_samples_for_leaf_)));
          set_has_min_samples_for_leaf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rv.rf.ForestParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rv.rf.ForestParameter)
  return false;
#undef DO_
}

void ForestParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rv.rf.ForestParameter)
  // optional .rv.rf.SplitFunctionParameter split_function_param = 1;
  if (has_split_function_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->split_function_param(), output);
  }

  // repeated .rv.rf.SplitEvaluatorParameter split_evaluator_param = 2;
  for (int i = 0; i < this->split_evaluator_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->split_evaluator_param(i), output);
  }

  // repeated .rv.rf.LeafNodeFcnParameter leaf_node_fcn_param = 3;
  for (int i = 0; i < this->leaf_node_fcn_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaf_node_fcn_param(i), output);
  }

  // optional uint32 n_trees = 5 [default = 4];
  if (has_n_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n_trees(), output);
  }

  // optional uint32 max_tree_depth = 6 [default = 5];
  if (has_max_tree_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_tree_depth(), output);
  }

  // optional uint32 n_test_samples = 7 [default = 1000];
  if (has_n_test_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->n_test_samples(), output);
  }

  // optional uint32 n_test_split_functions = 8 [default = 100];
  if (has_n_test_split_functions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->n_test_split_functions(), output);
  }

  // optional uint32 n_test_thresholds = 9 [default = 10];
  if (has_n_test_thresholds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->n_test_thresholds(), output);
  }

  // optional uint32 min_samples_to_split = 10 [default = 5];
  if (has_min_samples_to_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min_samples_to_split(), output);
  }

  // optional uint32 min_samples_for_leaf = 11 [default = 1];
  if (has_min_samples_for_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->min_samples_for_leaf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rv.rf.ForestParameter)
}

::google::protobuf::uint8* ForestParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rv.rf.ForestParameter)
  // optional .rv.rf.SplitFunctionParameter split_function_param = 1;
  if (has_split_function_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->split_function_param(), target);
  }

  // repeated .rv.rf.SplitEvaluatorParameter split_evaluator_param = 2;
  for (int i = 0; i < this->split_evaluator_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->split_evaluator_param(i), target);
  }

  // repeated .rv.rf.LeafNodeFcnParameter leaf_node_fcn_param = 3;
  for (int i = 0; i < this->leaf_node_fcn_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaf_node_fcn_param(i), target);
  }

  // optional uint32 n_trees = 5 [default = 4];
  if (has_n_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n_trees(), target);
  }

  // optional uint32 max_tree_depth = 6 [default = 5];
  if (has_max_tree_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_tree_depth(), target);
  }

  // optional uint32 n_test_samples = 7 [default = 1000];
  if (has_n_test_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->n_test_samples(), target);
  }

  // optional uint32 n_test_split_functions = 8 [default = 100];
  if (has_n_test_split_functions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->n_test_split_functions(), target);
  }

  // optional uint32 n_test_thresholds = 9 [default = 10];
  if (has_n_test_thresholds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->n_test_thresholds(), target);
  }

  // optional uint32 min_samples_to_split = 10 [default = 5];
  if (has_min_samples_to_split()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min_samples_to_split(), target);
  }

  // optional uint32 min_samples_for_leaf = 11 [default = 1];
  if (has_min_samples_for_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->min_samples_for_leaf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rv.rf.ForestParameter)
  return target;
}

int ForestParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rv.rf.SplitFunctionParameter split_function_param = 1;
    if (has_split_function_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->split_function_param());
    }

    // optional uint32 n_trees = 5 [default = 4];
    if (has_n_trees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_trees());
    }

    // optional uint32 max_tree_depth = 6 [default = 5];
    if (has_max_tree_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_tree_depth());
    }

    // optional uint32 n_test_samples = 7 [default = 1000];
    if (has_n_test_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_test_samples());
    }

    // optional uint32 n_test_split_functions = 8 [default = 100];
    if (has_n_test_split_functions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_test_split_functions());
    }

    // optional uint32 n_test_thresholds = 9 [default = 10];
    if (has_n_test_thresholds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_test_thresholds());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 min_samples_to_split = 10 [default = 5];
    if (has_min_samples_to_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_samples_to_split());
    }

    // optional uint32 min_samples_for_leaf = 11 [default = 1];
    if (has_min_samples_for_leaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_samples_for_leaf());
    }

  }
  // repeated .rv.rf.SplitEvaluatorParameter split_evaluator_param = 2;
  total_size += 1 * this->split_evaluator_param_size();
  for (int i = 0; i < this->split_evaluator_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->split_evaluator_param(i));
  }

  // repeated .rv.rf.LeafNodeFcnParameter leaf_node_fcn_param = 3;
  total_size += 1 * this->leaf_node_fcn_param_size();
  for (int i = 0; i < this->leaf_node_fcn_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaf_node_fcn_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForestParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForestParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForestParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForestParameter::MergeFrom(const ForestParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  split_evaluator_param_.MergeFrom(from.split_evaluator_param_);
  leaf_node_fcn_param_.MergeFrom(from.leaf_node_fcn_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_split_function_param()) {
      mutable_split_function_param()->::rv::rf::SplitFunctionParameter::MergeFrom(from.split_function_param());
    }
    if (from.has_n_trees()) {
      set_n_trees(from.n_trees());
    }
    if (from.has_max_tree_depth()) {
      set_max_tree_depth(from.max_tree_depth());
    }
    if (from.has_n_test_samples()) {
      set_n_test_samples(from.n_test_samples());
    }
    if (from.has_n_test_split_functions()) {
      set_n_test_split_functions(from.n_test_split_functions());
    }
    if (from.has_n_test_thresholds()) {
      set_n_test_thresholds(from.n_test_thresholds());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_samples_to_split()) {
      set_min_samples_to_split(from.min_samples_to_split());
    }
    if (from.has_min_samples_for_leaf()) {
      set_min_samples_for_leaf(from.min_samples_for_leaf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForestParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForestParameter::CopyFrom(const ForestParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForestParameter::IsInitialized() const {

  return true;
}

void ForestParameter::Swap(ForestParameter* other) {
  if (other != this) {
    std::swap(split_function_param_, other->split_function_param_);
    split_evaluator_param_.Swap(&other->split_evaluator_param_);
    leaf_node_fcn_param_.Swap(&other->leaf_node_fcn_param_);
    std::swap(n_trees_, other->n_trees_);
    std::swap(max_tree_depth_, other->max_tree_depth_);
    std::swap(n_test_samples_, other->n_test_samples_);
    std::swap(n_test_split_functions_, other->n_test_split_functions_);
    std::swap(n_test_thresholds_, other->n_test_thresholds_);
    std::swap(min_samples_to_split_, other->min_samples_to_split_);
    std::swap(min_samples_for_leaf_, other->min_samples_for_leaf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForestParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForestParameter_descriptor_;
  metadata.reflection = ForestParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SplitFunctionParameter_SplitFunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitFunctionParameter_SplitFunctionType_descriptor_;
}
bool SplitFunctionParameter_SplitFunctionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SplitFunctionParameter_SplitFunctionType SplitFunctionParameter::PIXEL_VALUE;
const SplitFunctionParameter_SplitFunctionType SplitFunctionParameter::PIXEL_DIFFERENCE;
const SplitFunctionParameter_SplitFunctionType SplitFunctionParameter::PIXEL_DIFFERENCE_DEPENDENT;
const SplitFunctionParameter_SplitFunctionType SplitFunctionParameter::BASIS_FCN;
const SplitFunctionParameter_SplitFunctionType SplitFunctionParameter::SplitFunctionType_MIN;
const SplitFunctionParameter_SplitFunctionType SplitFunctionParameter::SplitFunctionType_MAX;
const int SplitFunctionParameter::SplitFunctionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SplitFunctionParameter_GeneratorSpace_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitFunctionParameter_GeneratorSpace_descriptor_;
}
bool SplitFunctionParameter_GeneratorSpace_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SplitFunctionParameter_GeneratorSpace SplitFunctionParameter::LINEAR;
const SplitFunctionParameter_GeneratorSpace SplitFunctionParameter::LOG_10;
const SplitFunctionParameter_GeneratorSpace SplitFunctionParameter::DATA_LINEAR;
const SplitFunctionParameter_GeneratorSpace SplitFunctionParameter::GeneratorSpace_MIN;
const SplitFunctionParameter_GeneratorSpace SplitFunctionParameter::GeneratorSpace_MAX;
const int SplitFunctionParameter::GeneratorSpace_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SplitFunctionParameter::kTypeFieldNumber;
const int SplitFunctionParameter::kGenNSlicesFieldNumber;
const int SplitFunctionParameter::kGenFixOneFieldNumber;
const int SplitFunctionParameter::kGenSpaceFieldNumber;
const int SplitFunctionParameter::kGenXFromFieldNumber;
const int SplitFunctionParameter::kGenXToFieldNumber;
const int SplitFunctionParameter::kGenXNFieldNumber;
const int SplitFunctionParameter::kGenYFromFieldNumber;
const int SplitFunctionParameter::kGenYToFieldNumber;
const int SplitFunctionParameter::kGenYNFieldNumber;
const int SplitFunctionParameter::kBasisCsvFieldNumber;
#endif  // !_MSC_VER

SplitFunctionParameter::SplitFunctionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rv.rf.SplitFunctionParameter)
}

void SplitFunctionParameter::InitAsDefaultInstance() {
}

SplitFunctionParameter::SplitFunctionParameter(const SplitFunctionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rv.rf.SplitFunctionParameter)
}

void SplitFunctionParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  gen_n_slices_ = 1u;
  gen_fix_one_ = false;
  gen_space_ = 2;
  gen_x_from_ = 0;
  gen_x_to_ = 0;
  gen_x_n_ = 0u;
  gen_y_from_ = 0;
  gen_y_to_ = 0;
  gen_y_n_ = 0u;
  basis_csv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitFunctionParameter::~SplitFunctionParameter() {
  // @@protoc_insertion_point(destructor:rv.rf.SplitFunctionParameter)
  SharedDtor();
}

void SplitFunctionParameter::SharedDtor() {
  if (basis_csv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete basis_csv_;
  }
  if (this != default_instance_) {
  }
}

void SplitFunctionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitFunctionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitFunctionParameter_descriptor_;
}

const SplitFunctionParameter& SplitFunctionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_2eproto();
  return *default_instance_;
}

SplitFunctionParameter* SplitFunctionParameter::default_instance_ = NULL;

SplitFunctionParameter* SplitFunctionParameter::New() const {
  return new SplitFunctionParameter;
}

void SplitFunctionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SplitFunctionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gen_x_from_, gen_y_from_);
    type_ = 0;
    gen_n_slices_ = 1u;
    gen_fix_one_ = false;
    gen_space_ = 2;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(gen_y_to_, gen_y_n_);
    if (has_basis_csv()) {
      if (basis_csv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        basis_csv_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitFunctionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rv.rf.SplitFunctionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rv.rf.SplitFunctionParameter.SplitFunctionType type = 1 [default = PIXEL_VALUE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rv::rf::SplitFunctionParameter_SplitFunctionType_IsValid(value)) {
            set_type(static_cast< ::rv::rf::SplitFunctionParameter_SplitFunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gen_n_slices;
        break;
      }

      // optional uint32 gen_n_slices = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_gen_n_slices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gen_n_slices_)));
          set_has_gen_n_slices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gen_fix_one;
        break;
      }

      // optional bool gen_fix_one = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_gen_fix_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gen_fix_one_)));
          set_has_gen_fix_one();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gen_space;
        break;
      }

      // optional .rv.rf.SplitFunctionParameter.GeneratorSpace gen_space = 4 [default = DATA_LINEAR];
      case 4: {
        if (tag == 32) {
         parse_gen_space:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rv::rf::SplitFunctionParameter_GeneratorSpace_IsValid(value)) {
            set_gen_space(static_cast< ::rv::rf::SplitFunctionParameter_GeneratorSpace >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_gen_x_from;
        break;
      }

      // optional float gen_x_from = 5;
      case 5: {
        if (tag == 45) {
         parse_gen_x_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gen_x_from_)));
          set_has_gen_x_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_gen_x_to;
        break;
      }

      // optional float gen_x_to = 6;
      case 6: {
        if (tag == 53) {
         parse_gen_x_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gen_x_to_)));
          set_has_gen_x_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gen_x_n;
        break;
      }

      // optional uint32 gen_x_n = 7;
      case 7: {
        if (tag == 56) {
         parse_gen_x_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gen_x_n_)));
          set_has_gen_x_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_gen_y_from;
        break;
      }

      // optional float gen_y_from = 8;
      case 8: {
        if (tag == 69) {
         parse_gen_y_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gen_y_from_)));
          set_has_gen_y_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_gen_y_to;
        break;
      }

      // optional float gen_y_to = 9;
      case 9: {
        if (tag == 77) {
         parse_gen_y_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gen_y_to_)));
          set_has_gen_y_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gen_y_n;
        break;
      }

      // optional uint32 gen_y_n = 10;
      case 10: {
        if (tag == 80) {
         parse_gen_y_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gen_y_n_)));
          set_has_gen_y_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_basis_csv;
        break;
      }

      // optional string basis_csv = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_basis_csv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basis_csv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->basis_csv().data(), this->basis_csv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "basis_csv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rv.rf.SplitFunctionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rv.rf.SplitFunctionParameter)
  return false;
#undef DO_
}

void SplitFunctionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rv.rf.SplitFunctionParameter)
  // optional .rv.rf.SplitFunctionParameter.SplitFunctionType type = 1 [default = PIXEL_VALUE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 gen_n_slices = 2 [default = 1];
  if (has_gen_n_slices()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gen_n_slices(), output);
  }

  // optional bool gen_fix_one = 3 [default = false];
  if (has_gen_fix_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gen_fix_one(), output);
  }

  // optional .rv.rf.SplitFunctionParameter.GeneratorSpace gen_space = 4 [default = DATA_LINEAR];
  if (has_gen_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gen_space(), output);
  }

  // optional float gen_x_from = 5;
  if (has_gen_x_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gen_x_from(), output);
  }

  // optional float gen_x_to = 6;
  if (has_gen_x_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gen_x_to(), output);
  }

  // optional uint32 gen_x_n = 7;
  if (has_gen_x_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gen_x_n(), output);
  }

  // optional float gen_y_from = 8;
  if (has_gen_y_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->gen_y_from(), output);
  }

  // optional float gen_y_to = 9;
  if (has_gen_y_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gen_y_to(), output);
  }

  // optional uint32 gen_y_n = 10;
  if (has_gen_y_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gen_y_n(), output);
  }

  // optional string basis_csv = 11 [default = ""];
  if (has_basis_csv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basis_csv().data(), this->basis_csv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "basis_csv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->basis_csv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rv.rf.SplitFunctionParameter)
}

::google::protobuf::uint8* SplitFunctionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rv.rf.SplitFunctionParameter)
  // optional .rv.rf.SplitFunctionParameter.SplitFunctionType type = 1 [default = PIXEL_VALUE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 gen_n_slices = 2 [default = 1];
  if (has_gen_n_slices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gen_n_slices(), target);
  }

  // optional bool gen_fix_one = 3 [default = false];
  if (has_gen_fix_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gen_fix_one(), target);
  }

  // optional .rv.rf.SplitFunctionParameter.GeneratorSpace gen_space = 4 [default = DATA_LINEAR];
  if (has_gen_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gen_space(), target);
  }

  // optional float gen_x_from = 5;
  if (has_gen_x_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gen_x_from(), target);
  }

  // optional float gen_x_to = 6;
  if (has_gen_x_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gen_x_to(), target);
  }

  // optional uint32 gen_x_n = 7;
  if (has_gen_x_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gen_x_n(), target);
  }

  // optional float gen_y_from = 8;
  if (has_gen_y_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->gen_y_from(), target);
  }

  // optional float gen_y_to = 9;
  if (has_gen_y_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gen_y_to(), target);
  }

  // optional uint32 gen_y_n = 10;
  if (has_gen_y_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gen_y_n(), target);
  }

  // optional string basis_csv = 11 [default = ""];
  if (has_basis_csv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->basis_csv().data(), this->basis_csv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "basis_csv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->basis_csv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rv.rf.SplitFunctionParameter)
  return target;
}

int SplitFunctionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rv.rf.SplitFunctionParameter.SplitFunctionType type = 1 [default = PIXEL_VALUE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 gen_n_slices = 2 [default = 1];
    if (has_gen_n_slices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gen_n_slices());
    }

    // optional bool gen_fix_one = 3 [default = false];
    if (has_gen_fix_one()) {
      total_size += 1 + 1;
    }

    // optional .rv.rf.SplitFunctionParameter.GeneratorSpace gen_space = 4 [default = DATA_LINEAR];
    if (has_gen_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gen_space());
    }

    // optional float gen_x_from = 5;
    if (has_gen_x_from()) {
      total_size += 1 + 4;
    }

    // optional float gen_x_to = 6;
    if (has_gen_x_to()) {
      total_size += 1 + 4;
    }

    // optional uint32 gen_x_n = 7;
    if (has_gen_x_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gen_x_n());
    }

    // optional float gen_y_from = 8;
    if (has_gen_y_from()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float gen_y_to = 9;
    if (has_gen_y_to()) {
      total_size += 1 + 4;
    }

    // optional uint32 gen_y_n = 10;
    if (has_gen_y_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gen_y_n());
    }

    // optional string basis_csv = 11 [default = ""];
    if (has_basis_csv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basis_csv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitFunctionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitFunctionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitFunctionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitFunctionParameter::MergeFrom(const SplitFunctionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gen_n_slices()) {
      set_gen_n_slices(from.gen_n_slices());
    }
    if (from.has_gen_fix_one()) {
      set_gen_fix_one(from.gen_fix_one());
    }
    if (from.has_gen_space()) {
      set_gen_space(from.gen_space());
    }
    if (from.has_gen_x_from()) {
      set_gen_x_from(from.gen_x_from());
    }
    if (from.has_gen_x_to()) {
      set_gen_x_to(from.gen_x_to());
    }
    if (from.has_gen_x_n()) {
      set_gen_x_n(from.gen_x_n());
    }
    if (from.has_gen_y_from()) {
      set_gen_y_from(from.gen_y_from());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gen_y_to()) {
      set_gen_y_to(from.gen_y_to());
    }
    if (from.has_gen_y_n()) {
      set_gen_y_n(from.gen_y_n());
    }
    if (from.has_basis_csv()) {
      set_basis_csv(from.basis_csv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitFunctionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitFunctionParameter::CopyFrom(const SplitFunctionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitFunctionParameter::IsInitialized() const {

  return true;
}

void SplitFunctionParameter::Swap(SplitFunctionParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gen_n_slices_, other->gen_n_slices_);
    std::swap(gen_fix_one_, other->gen_fix_one_);
    std::swap(gen_space_, other->gen_space_);
    std::swap(gen_x_from_, other->gen_x_from_);
    std::swap(gen_x_to_, other->gen_x_to_);
    std::swap(gen_x_n_, other->gen_x_n_);
    std::swap(gen_y_from_, other->gen_y_from_);
    std::swap(gen_y_to_, other->gen_y_to_);
    std::swap(gen_y_n_, other->gen_y_n_);
    std::swap(basis_csv_, other->basis_csv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitFunctionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitFunctionParameter_descriptor_;
  metadata.reflection = SplitFunctionParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SplitEvaluatorParameter_SplitEvaluatorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitEvaluatorParameter_SplitEvaluatorType_descriptor_;
}
bool SplitEvaluatorParameter_SplitEvaluatorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::CLASSIFICATION_INFORMATION_GAIN;
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::CLASSIFICATION_GINI;
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::REGRESSION_TRACE_COV;
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::REGRESSION_VARIANCE_REDUCTION;
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::REGRESSION_WEIGHTED_TRACE_COV;
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::SplitEvaluatorType_MIN;
const SplitEvaluatorParameter_SplitEvaluatorType SplitEvaluatorParameter::SplitEvaluatorType_MAX;
const int SplitEvaluatorParameter::SplitEvaluatorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SplitEvaluatorParameter::kTypeFieldNumber;
const int SplitEvaluatorParameter::kNormalizeFieldNumber;
const int SplitEvaluatorParameter::kWeightFieldNumber;
const int SplitEvaluatorParameter::kWeightedMeanFieldNumber;
#endif  // !_MSC_VER

SplitEvaluatorParameter::SplitEvaluatorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rv.rf.SplitEvaluatorParameter)
}

void SplitEvaluatorParameter::InitAsDefaultInstance() {
}

SplitEvaluatorParameter::SplitEvaluatorParameter(const SplitEvaluatorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rv.rf.SplitEvaluatorParameter)
}

void SplitEvaluatorParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  normalize_ = true;
  weight_ = 1;
  weighted_mean_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitEvaluatorParameter::~SplitEvaluatorParameter() {
  // @@protoc_insertion_point(destructor:rv.rf.SplitEvaluatorParameter)
  SharedDtor();
}

void SplitEvaluatorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SplitEvaluatorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitEvaluatorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitEvaluatorParameter_descriptor_;
}

const SplitEvaluatorParameter& SplitEvaluatorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_2eproto();
  return *default_instance_;
}

SplitEvaluatorParameter* SplitEvaluatorParameter::default_instance_ = NULL;

SplitEvaluatorParameter* SplitEvaluatorParameter::New() const {
  return new SplitEvaluatorParameter;
}

void SplitEvaluatorParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0;
    normalize_ = true;
    weight_ = 1;
    weighted_mean_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitEvaluatorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rv.rf.SplitEvaluatorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rv.rf.SplitEvaluatorParameter.SplitEvaluatorType type = 1 [default = CLASSIFICATION_INFORMATION_GAIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rv::rf::SplitEvaluatorParameter_SplitEvaluatorType_IsValid(value)) {
            set_type(static_cast< ::rv::rf::SplitEvaluatorParameter_SplitEvaluatorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
          set_has_normalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }

      // optional float weight = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weighted_mean;
        break;
      }

      // optional bool weighted_mean = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_weighted_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weighted_mean_)));
          set_has_weighted_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rv.rf.SplitEvaluatorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rv.rf.SplitEvaluatorParameter)
  return false;
#undef DO_
}

void SplitEvaluatorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rv.rf.SplitEvaluatorParameter)
  // optional .rv.rf.SplitEvaluatorParameter.SplitEvaluatorType type = 1 [default = CLASSIFICATION_INFORMATION_GAIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool normalize = 2 [default = true];
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
  }

  // optional float weight = 3 [default = 1];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }

  // optional bool weighted_mean = 4 [default = false];
  if (has_weighted_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->weighted_mean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rv.rf.SplitEvaluatorParameter)
}

::google::protobuf::uint8* SplitEvaluatorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rv.rf.SplitEvaluatorParameter)
  // optional .rv.rf.SplitEvaluatorParameter.SplitEvaluatorType type = 1 [default = CLASSIFICATION_INFORMATION_GAIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool normalize = 2 [default = true];
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
  }

  // optional float weight = 3 [default = 1];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }

  // optional bool weighted_mean = 4 [default = false];
  if (has_weighted_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->weighted_mean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rv.rf.SplitEvaluatorParameter)
  return target;
}

int SplitEvaluatorParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rv.rf.SplitEvaluatorParameter.SplitEvaluatorType type = 1 [default = CLASSIFICATION_INFORMATION_GAIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool normalize = 2 [default = true];
    if (has_normalize()) {
      total_size += 1 + 1;
    }

    // optional float weight = 3 [default = 1];
    if (has_weight()) {
      total_size += 1 + 4;
    }

    // optional bool weighted_mean = 4 [default = false];
    if (has_weighted_mean()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitEvaluatorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitEvaluatorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitEvaluatorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitEvaluatorParameter::MergeFrom(const SplitEvaluatorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_weighted_mean()) {
      set_weighted_mean(from.weighted_mean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitEvaluatorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitEvaluatorParameter::CopyFrom(const SplitEvaluatorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitEvaluatorParameter::IsInitialized() const {

  return true;
}

void SplitEvaluatorParameter::Swap(SplitEvaluatorParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(normalize_, other->normalize_);
    std::swap(weight_, other->weight_);
    std::swap(weighted_mean_, other->weighted_mean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitEvaluatorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitEvaluatorParameter_descriptor_;
  metadata.reflection = SplitEvaluatorParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LeafNodeFcnParameter_LeafNodeFcnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeafNodeFcnParameter_LeafNodeFcnType_descriptor_;
}
bool LeafNodeFcnParameter_LeafNodeFcnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::CLASSIFICATION;
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::REGRESSION_MEAN;
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::REGRESSION_MEAN_STD;
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::REGRESSION_MEDIAN;
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::REGRESSION_REGRESSION;
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::LeafNodeFcnType_MIN;
const LeafNodeFcnParameter_LeafNodeFcnType LeafNodeFcnParameter::LeafNodeFcnType_MAX;
const int LeafNodeFcnParameter::LeafNodeFcnType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LeafNodeFcnParameter::kTypeFieldNumber;
const int LeafNodeFcnParameter::kLambdaFieldNumber;
const int LeafNodeFcnParameter::kUseBiasFieldNumber;
const int LeafNodeFcnParameter::kPolyDegreeFieldNumber;
const int LeafNodeFcnParameter::kWeightedRegressionFieldNumber;
#endif  // !_MSC_VER

LeafNodeFcnParameter::LeafNodeFcnParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rv.rf.LeafNodeFcnParameter)
}

void LeafNodeFcnParameter::InitAsDefaultInstance() {
}

LeafNodeFcnParameter::LeafNodeFcnParameter(const LeafNodeFcnParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rv.rf.LeafNodeFcnParameter)
}

void LeafNodeFcnParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  lambda_ = 0;
  use_bias_ = true;
  poly_degree_ = 1u;
  weighted_regression_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeafNodeFcnParameter::~LeafNodeFcnParameter() {
  // @@protoc_insertion_point(destructor:rv.rf.LeafNodeFcnParameter)
  SharedDtor();
}

void LeafNodeFcnParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeafNodeFcnParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeafNodeFcnParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeafNodeFcnParameter_descriptor_;
}

const LeafNodeFcnParameter& LeafNodeFcnParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rf_2eproto();
  return *default_instance_;
}

LeafNodeFcnParameter* LeafNodeFcnParameter::default_instance_ = NULL;

LeafNodeFcnParameter* LeafNodeFcnParameter::New() const {
  return new LeafNodeFcnParameter;
}

void LeafNodeFcnParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LeafNodeFcnParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, lambda_);
    use_bias_ = true;
    poly_degree_ = 1u;
    weighted_regression_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeafNodeFcnParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rv.rf.LeafNodeFcnParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rv.rf.LeafNodeFcnParameter.LeafNodeFcnType type = 1 [default = CLASSIFICATION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rv::rf::LeafNodeFcnParameter_LeafNodeFcnType_IsValid(value)) {
            set_type(static_cast< ::rv::rf::LeafNodeFcnParameter_LeafNodeFcnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lambda;
        break;
      }

      // optional float lambda = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_lambda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda_)));
          set_has_lambda();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_bias;
        break;
      }

      // optional bool use_bias = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_use_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_bias_)));
          set_has_use_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_poly_degree;
        break;
      }

      // optional uint32 poly_degree = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_poly_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poly_degree_)));
          set_has_poly_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weighted_regression;
        break;
      }

      // optional bool weighted_regression = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_weighted_regression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weighted_regression_)));
          set_has_weighted_regression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rv.rf.LeafNodeFcnParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rv.rf.LeafNodeFcnParameter)
  return false;
#undef DO_
}

void LeafNodeFcnParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rv.rf.LeafNodeFcnParameter)
  // optional .rv.rf.LeafNodeFcnParameter.LeafNodeFcnType type = 1 [default = CLASSIFICATION];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float lambda = 2 [default = 0];
  if (has_lambda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lambda(), output);
  }

  // optional bool use_bias = 3 [default = true];
  if (has_use_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_bias(), output);
  }

  // optional uint32 poly_degree = 4 [default = 1];
  if (has_poly_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->poly_degree(), output);
  }

  // optional bool weighted_regression = 5 [default = false];
  if (has_weighted_regression()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->weighted_regression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rv.rf.LeafNodeFcnParameter)
}

::google::protobuf::uint8* LeafNodeFcnParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rv.rf.LeafNodeFcnParameter)
  // optional .rv.rf.LeafNodeFcnParameter.LeafNodeFcnType type = 1 [default = CLASSIFICATION];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float lambda = 2 [default = 0];
  if (has_lambda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lambda(), target);
  }

  // optional bool use_bias = 3 [default = true];
  if (has_use_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_bias(), target);
  }

  // optional uint32 poly_degree = 4 [default = 1];
  if (has_poly_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->poly_degree(), target);
  }

  // optional bool weighted_regression = 5 [default = false];
  if (has_weighted_regression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->weighted_regression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rv.rf.LeafNodeFcnParameter)
  return target;
}

int LeafNodeFcnParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rv.rf.LeafNodeFcnParameter.LeafNodeFcnType type = 1 [default = CLASSIFICATION];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float lambda = 2 [default = 0];
    if (has_lambda()) {
      total_size += 1 + 4;
    }

    // optional bool use_bias = 3 [default = true];
    if (has_use_bias()) {
      total_size += 1 + 1;
    }

    // optional uint32 poly_degree = 4 [default = 1];
    if (has_poly_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poly_degree());
    }

    // optional bool weighted_regression = 5 [default = false];
    if (has_weighted_regression()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeafNodeFcnParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeafNodeFcnParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeafNodeFcnParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeafNodeFcnParameter::MergeFrom(const LeafNodeFcnParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lambda()) {
      set_lambda(from.lambda());
    }
    if (from.has_use_bias()) {
      set_use_bias(from.use_bias());
    }
    if (from.has_poly_degree()) {
      set_poly_degree(from.poly_degree());
    }
    if (from.has_weighted_regression()) {
      set_weighted_regression(from.weighted_regression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeafNodeFcnParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafNodeFcnParameter::CopyFrom(const LeafNodeFcnParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNodeFcnParameter::IsInitialized() const {

  return true;
}

void LeafNodeFcnParameter::Swap(LeafNodeFcnParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lambda_, other->lambda_);
    std::swap(use_bias_, other->use_bias_);
    std::swap(poly_degree_, other->poly_degree_);
    std::swap(weighted_regression_, other->weighted_regression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeafNodeFcnParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeafNodeFcnParameter_descriptor_;
  metadata.reflection = LeafNodeFcnParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rf
}  // namespace rv

// @@protoc_insertion_point(global_scope)
